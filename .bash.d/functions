,has() {
        command -v "$1" 1>/dev/null 2>&1
}

,l ()
{
    file_or_dir=${1-.}
    if [ "$#" -ne 1 ]; then
	ls -Hlrt "$@";
    else
	if [ -d "${file_or_dir}" ]
	then ls -Hlrt "${file_or_dir}";
	else less "${file_or_dir}";
	fi
    fi
}


################################################################
#### Various tmux functions
################################################################
## Attach
,ta ()
{
    tmux attach -t $@
}


## List
,tl ()
{
    tmux list-sessions -F "#{session_last_attached} #{p10:session_name}   #{t/f/%e %b:session_last_attached} #{s|${_lab}/working/${USER}/projects|\$p|:session_path}" | sort -k1 | cut -d" " -f2-
    tmux list-sessions 1>/dev/null && tmux list-sessions -F "export PROJECT=#{session_name}; tmux new -d -s #{session_name} -c #{session_path}" > ~/.tmux.$(hostname).sessions.sh || true
    em=`ls -C /run/user/${UID}/emacs`
    if [[ -z "$em" ]]
    then
	echo "No emacs servers running"
    else
	echo "Emacs daemons: $em"
    fi
}

## New
,tn ()
{
    tmux new -s "$1" -e PROJECT="$1" -e SSH_AUTH_SOCK=$HOME/.ssh/ssh_auth_sock
}

## Update various variables when attached
,tup () {
    export DISPLAY="`tmux show-env | sed -n 's/^DISPLAY=//p'`"
    export SINGULARITYENV_DISPLAY="`tmux show-env | sed -n 's/^DISPLAY=//p'`"
    export SSH_CLIENT="`tmux show-env | sed -n 's/^SSH_CLIENT=//p'`"
    echo "Sys.setenv(DISPLAY=\"$DISPLAY\") # To update any old R sessions"
}





################################################################
#### Interact with project directories
################################################################
#Find all project directories that confirm to standard format, filtering by possible argument to function
,lpro ()
{
    if [ "$#" -eq 1 ]; then
find $_projects -maxdepth 3 -mindepth 3 -type d -not -path '*/\.*'  | cut -f2 -d$'\t' |  grep ${1:-.}
else
    find $_projects -maxdepth 3 -mindepth 3 -type d -not -path '*/\.*' -printf '%T+\t%P\n' | sort | cut -f2 -d$'\t' | column -t -s '/.' | grep ${1:-.}
    fi
}

#cd to project directory that matches the first argument
,cdpro ()
{
cd $_projects$(find $_projects -maxdepth 3 -mindepth 1 -type d -not -path  '*/\.*' -iname \*$1\* -printf '%P\n' | tail -1)
}

  
,internal () {
  if [ -z "$1" ] ; then 
  pwd | sed 's#working#www/html/internal/users#'
  else
  pwd | sed "s#${_lab}/working#https://bioinformatics.thecrick.org/users#"
  fi
}

,external () {
  if [ -z "$1" ] ; then 
  pwd | sed 's#working#www/html/external/users#'
  else
  pwd | sed "s#${_lab}/working#https://bioinformatics.crick.ac.uk/users#"
  fi
}

,outputs () {
  pwd | sed "s#working/${USER}/projects#outputs#" | sed "s#\(.*\)/#\1/${EMAIL_NAME}/#"
}



################################################################
#### Use the launchers
################################################################

alias_r () {
  local r
  r="$(ls -1 R-* 2>/dev/null | sed -e 's/R-//' | sort -V |  tail -n1 | sed -e 's/^/R-/')"
  "./$r" "@" 
}

alias_shell () {
  export BABS_CMD=shell
  alias_r $@
}